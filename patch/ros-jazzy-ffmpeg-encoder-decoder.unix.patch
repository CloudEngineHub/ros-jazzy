diff --git a/include/ffmpeg_encoder_decoder/decoder.hpp b/include/ffmpeg_encoder_decoder/decoder.hpp
index 0e2521c..94625e5 100644
--- a/include/ffmpeg_encoder_decoder/decoder.hpp
+++ b/include/ffmpeg_encoder_decoder/decoder.hpp
@@ -81,7 +81,7 @@ private:
   AVFrame * colorFrame_{NULL};
   SwsContext * swsContext_{NULL};
   enum AVPixelFormat hwPixFormat_;
-  AVPacket packet_;
+  // AVPacket packet_;
   AVBufferRef * hwDeviceContext_{NULL};
 };
 }  // namespace ffmpeg_encoder_decoder
diff --git a/src/decoder.cpp b/src/decoder.cpp
index 0a12d25..9737ffe 100644
--- a/src/decoder.cpp
+++ b/src/decoder.cpp
@@ -38,7 +38,11 @@ Decoder::~Decoder() { reset(); }
 void Decoder::reset()
 {
   if (codecContext_) {
+#if LIBAVFORMAT_VERSION_MAJOR < 59
     avcodec_close(codecContext_);
+#else
+    avcodec_free_context(&codecContext_);
+#endif
     av_free(codecContext_);
     codecContext_ = NULL;
   }
@@ -255,7 +259,7 @@ bool Decoder::decodePacket(
       image->header.stamp = it->second;
       ptsToStamp_.erase(it);
 #ifdef USE_AV_FLAGS
-      callback_(image, decodedFrame_->flags || AV_FRAME_FLAG_KEY);  // deliver callback
+      callback_(image, decodedFrame_->flags | AV_FRAME_FLAG_KEY);  // deliver callback
 #else
       callback_(image, decodedFrame_->key_frame);  // deliver callback
 #endif
diff --git a/src/encoder.cpp b/src/encoder.cpp
index d5c15ca..1086f35 100644
--- a/src/encoder.cpp
+++ b/src/encoder.cpp
@@ -54,7 +54,11 @@ static void free_frame(AVFrame ** frame)
 void Encoder::closeCodec()
 {
   if (codecContext_) {
+#if LIBAVFORMAT_VERSION_MAJOR < 59
     avcodec_close(codecContext_);
+#else
+    avcodec_free_context(&codecContext_);
+#endif
     codecContext_ = nullptr;
   }
   free_frame(&frame_);
@@ -208,11 +212,19 @@ void Encoder::doOpenCodec(int width, int height)
   setAVOption("tune", tune_);
   setAVOption("delay", delay_);
   setAVOption("crf", crf_);
+#ifdef __APPLE__
+  RCLCPP_DEBUG(
+    logger_,
+    "codec: %10s, profile: %10s, preset: %10s,"
+    " bit_rate: %10lld qmax: %2d",
+    encoder_.c_str(), profile_.c_str(), preset_.c_str(), bitRate_, qmax_);
+#else
   RCLCPP_DEBUG(
     logger_,
     "codec: %10s, profile: %10s, preset: %10s,"
     " bit_rate: %10ld qmax: %2d",
     encoder_.c_str(), profile_.c_str(), preset_.c_str(), bitRate_, qmax_);
+#endif
 
   err = avcodec_open2(codecContext_, codec, NULL);
   utils::check_for_err("cannot open codec", err);
diff --git a/src/utils.cpp b/src/utils.cpp
index da089e4..01e8eea 100644
--- a/src/utils.cpp
+++ b/src/utils.cpp
@@ -104,8 +104,15 @@ enum AVPixelFormat get_preferred_pixel_format(
 std::vector<enum AVPixelFormat> get_encoder_formats(const AVCodec * c)
 {
   std::vector<enum AVPixelFormat> formats;
-  if (c && c->pix_fmts) {
-    for (const auto * p = c->pix_fmts; *p != AV_PIX_FMT_NONE; ++p) {
+#if LIBAVUTIL_VERSION_MAJOR > 59 || (LIBAVUTIL_VERSION_MAJOR == 59 && LIBAVUTIL_VERSION_MINOR >= 39)
+  const enum AVPixelFormat *pix_fmts = NULL;
+  avcodec_get_supported_config(NULL, c, AV_CODEC_CONFIG_PIX_FORMAT, 0, (const void **) &pix_fmts, NULL);
+  if (c && pix_fmts) {
+#else
+  const enum AVPixelFormat *pix_fmts = c->pix_fmts;
+  if (c && pix_fmts) {
+#endif
+    for (const auto * p = pix_fmts; *p != AV_PIX_FMT_NONE; ++p) {
       formats.push_back(*p);
     }
   }
