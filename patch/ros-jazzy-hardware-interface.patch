diff --git a/CMakeLists.txt b/CMakeLists.txt
index 385ae96fb..e4883ff18 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,11 +1,6 @@
 cmake_minimum_required(VERSION 3.16)
 project(hardware_interface LANGUAGES CXX)
 
-if(CMAKE_CXX_COMPILER_ID MATCHES "(GNU|Clang)")
-  add_compile_options(-Wall -Wextra -Werror=conversion -Werror=unused-but-set-variable -Werror=return-type -Werror=shadow
-          -Werror=missing-braces)
-endif()
-
 set(THIS_PACKAGE_INCLUDE_DEPENDS
   control_msgs
   lifecycle_msgs
@@ -51,6 +46,7 @@ target_include_directories(mock_components PUBLIC
   $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
   $<INSTALL_INTERFACE:include/hardware_interface>
 )
+target_link_libraries(mock_components PUBLIC hardware_interface)
 ament_target_dependencies(mock_components PUBLIC ${THIS_PACKAGE_INCLUDE_DEPENDS})
 # Causes the visibility macros to use dllexport rather than dllimport,
 # which is appropriate when building the dll but not consuming it.
diff --git a/include/hardware_interface/async_components.hpp b/include/hardware_interface/async_components.hpp
index 052c4ba92..85efed01f 100644
--- a/include/hardware_interface/async_components.hpp
+++ b/include/hardware_interface/async_components.hpp
@@ -82,7 +82,11 @@ public:
         {
           auto const period = std::chrono::nanoseconds(1'000'000'000 / cm_update_rate_);
           TimePoint next_iteration_time =
-            TimePoint(std::chrono::nanoseconds(clock_interface_->get_clock()->now().nanoseconds()));
+            TimePoint(std::chrono::system_clock::time_point(
+                std::chrono::duration_cast<std::chrono::system_clock::duration>(
+                    std::chrono::nanoseconds(clock_interface_->get_clock()->now().nanoseconds())
+                )
+            ));
 
           if (
             component->get_lifecycle_state().id() ==
@@ -99,7 +103,7 @@ public:
             component->read(clock_interface_->get_clock()->now(), measured_period);
             first_iteration = false;
           }
-          next_iteration_time += period;
+          next_iteration_time += std::chrono::duration_cast<decltype(next_iteration_time)::duration>(period);
           std::this_thread::sleep_until(next_iteration_time);
         }
       },
