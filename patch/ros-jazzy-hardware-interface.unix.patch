diff --git a/include/hardware_interface/async_components.hpp b/include/hardware_interface/async_components.hpp
index 052c4ba92..85efed01f 100644
--- a/include/hardware_interface/async_components.hpp
+++ b/include/hardware_interface/async_components.hpp
@@ -82,7 +82,11 @@ public:
         {
           auto const period = std::chrono::nanoseconds(1'000'000'000 / cm_update_rate_);
           TimePoint next_iteration_time =
-            TimePoint(std::chrono::nanoseconds(clock_interface_->get_clock()->now().nanoseconds()));
+            TimePoint(std::chrono::system_clock::time_point(
+                std::chrono::duration_cast<std::chrono::system_clock::duration>(
+                    std::chrono::nanoseconds(clock_interface_->get_clock()->now().nanoseconds())
+                )
+            ));
 
           if (
             component->get_lifecycle_state().id() ==
@@ -99,7 +103,7 @@ public:
             component->read(clock_interface_->get_clock()->now(), measured_period);
             first_iteration = false;
           }
-          next_iteration_time += period;
+          next_iteration_time += std::chrono::duration_cast<decltype(next_iteration_time)::duration>(period);
           std::this_thread::sleep_until(next_iteration_time);
         }
       },
diff --git a/include/hardware_interface/types/statistics_types.hpp b/include/hardware_interface/types/statistics_types.hpp
index ba22a47c9..8083b66f7 100644
--- a/include/hardware_interface/types/statistics_types.hpp
+++ b/include/hardware_interface/types/statistics_types.hpp
@@ -22,7 +22,12 @@
 
 #include "libstatistics_collector/moving_average_statistics/moving_average.hpp"
 #include "libstatistics_collector/moving_average_statistics/types.hpp"
+#if !defined(_WIN32) && !defined(__APPLE__)
 #include "realtime_tools/mutex.hpp"
+#define DEFAULT_MUTEX realtime_tools::prio_inherit_mutex
+#else
+#define DEFAULT_MUTEX std::mutex
+#endif
 
 namespace ros2_control
 {
@@ -49,7 +54,7 @@ public:
    */
   void update_statistics(const std::shared_ptr<MovingAverageStatisticsCollector> & statistics)
   {
-    std::unique_lock<realtime_tools::prio_inherit_mutex> lock(mutex_);
+    std::unique_lock<DEFAULT_MUTEX> lock(mutex_);
     if (statistics->GetCount() > 0)
     {
       statistics_data.average = statistics->Average();
@@ -71,7 +76,7 @@ public:
    */
   void set_reset_statistics_sample_count(unsigned int reset_sample_count)
   {
-    std::unique_lock<realtime_tools::prio_inherit_mutex> lock(mutex_);
+    std::unique_lock<DEFAULT_MUTEX> lock(mutex_);
     reset_statistics_sample_count_ = reset_sample_count;
   }
 
@@ -90,7 +95,7 @@ public:
    */
   const StatisticData & get_statistics() const
   {
-    std::unique_lock<realtime_tools::prio_inherit_mutex> lock(mutex_);
+    std::unique_lock<DEFAULT_MUTEX> lock(mutex_);
     return statistics_data;
   }
 
@@ -100,7 +105,7 @@ private:
   /// Number of samples to reset the statistics
   unsigned int reset_statistics_sample_count_ = std::numeric_limits<unsigned int>::max();
   /// Mutex to protect the statistics data
-  mutable realtime_tools::prio_inherit_mutex mutex_;
+  mutable DEFAULT_MUTEX mutex_;
 };
 }  // namespace ros2_control
 
