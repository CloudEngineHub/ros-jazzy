diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5a9be70..9141953 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -40,7 +40,7 @@ target_include_directories(realtime_tools PUBLIC
   $<INSTALL_INTERFACE:include/realtime_tools>
 )
 ament_target_dependencies(realtime_tools PUBLIC ${THIS_PACKAGE_INCLUDE_DEPENDS})
-if(UNIX)
+if(UNIX AND NOT APPLE)
   target_link_libraries(realtime_tools PUBLIC cap)
 endif()
 
@@ -54,7 +54,7 @@ target_include_directories(thread_priority PUBLIC
   $<INSTALL_INTERFACE:include/realtime_tools>
 )
 ament_target_dependencies(thread_priority PUBLIC ${THIS_PACKAGE_INCLUDE_DEPENDS})
-if(UNIX)
+if(UNIX AND NOT APPLE)
   target_link_libraries(thread_priority PUBLIC cap)
 endif()
 
diff --git a/src/realtime_helpers.cpp b/src/realtime_helpers.cpp
index e55894c..e75e4c8 100644
--- a/src/realtime_helpers.cpp
+++ b/src/realtime_helpers.cpp
@@ -30,12 +30,15 @@
 
 #if defined(__unix__) || (defined(__APPLE__) && defined(__MACH__))
 #include <sched.h>
-#include <sys/capability.h>
 #include <sys/mman.h>
 
 #include <unistd.h>
 #endif
 
+#if defined(__unix__)
+#include <sys/capability.h>
+#endif
+
 #include <cstring>
 #include <fstream>
 
@@ -56,6 +59,19 @@ bool configure_sched_fifo(int priority)
 #ifdef _WIN32
   HANDLE thread = GetCurrentThread();
   return SetThreadPriority(thread, priority);
+#elif defined(__APPLE__)
+    pthread_t thread = pthread_self();
+    struct sched_param schedp;
+    memset(&schedp, 0, sizeof(schedp));
+    schedp.sched_priority = priority;
+
+    int policy = SCHED_FIFO;
+    if (pthread_setschedparam(thread, policy, &schedp) == 0) {
+        return true;
+    } else {
+        // Optionally log strerror(errno) for debugging
+        return false;
+    }
 #else
   struct sched_param schedp;
   memset(&schedp, 0, sizeof(schedp));
@@ -75,6 +91,8 @@ std::pair<bool, std::string> lock_memory()
 {
 #ifdef _WIN32
   return {false, "Memory locking is not supported on Windows."};
+#elif defined(__APPLE__)
+  return {false, "Memory locking is not supported on MacOS."};
 #else
   auto is_capable = [](cap_value_t v) -> bool {
     bool rc = false;
@@ -127,6 +145,9 @@ std::pair<bool, std::string> set_thread_affinity(
 #ifdef _WIN32
   message = "Thread affinity is not supported on Windows.";
   return std::make_pair(false, message);
+#elif defined(__APPLE__)
+  message = "Memory locking is not supported on MacOS.";
+  return std::make_pair(false, message);
 #else
   auto set_affinity_result_message = [](int result, std::string & msg) -> bool {
     if (result == 0) {
